#? 1 строка - n-кол-во чисел.
#Отсортировать числа в порядке невозрастания.
# Вывести первые 10 чисел и последние 10 чисел после сортировки.

# import sys
# sys.stdin = open('san-1.txt')
#
# n = int(input())
# a = []
# for i in range(n):
#     a.append(int(input()))
#
# a.sort(reverse=True)
# print(a[:10])
# print(a[-10:])

#? 1 строка - n-кол-во чисел.
#Отсортировать числа в порядке невозрастания первоначально по первому,
#а после по второму столбцу.
#Вывести первые 10 пар чисел и последние 10 пар чисел после сортировки.

# import sys
# sys.stdin = open('san-2.txt')
#
# n = int(input())
# a = []
# for i in range(n):
#     x, y = map(int, input().split())
#     a.append([x,y])
#
# a.sort(reverse=True)
# print(a[:10])
# print(a[-10:])

#?26
# Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает архив,
# может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого пользователя.
# По заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное
# число пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может
# быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.
# Входные данные. В первой строке входного файла 26.txt находятся два числа: S – размер свободного места на диске
# (натуральное число, не превышающее 100 000) и N – количество пользователей (натуральное число, не превышающее 10000). В
# следующих N строках находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100),
# каждое в отдельной строке.
# Запишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем
# максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы
# максимально возможного числа пользователей.
# Пример входного файла:
# 100 4
# 80
# 30
# 50
# 40
# При таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40,
# 30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар – 50, поэтому ответ для приведённого примера: 2 50

#Создаем текстовый файл для проверки кода #26-1.txt

# import sys
# sys.stdin = open('kurs-26-1.txt')
#
# s, n = map(int, input().split())
# a = []
# for i in range(n):
#     a.append(int(input()))
# a.sort()
#
# b = []
# for i in a:
#     if sum(b) + i <= s:
#         b.append(i)
# print(len(b))
# b.pop()
# delta = s - sum(b) #Свободное место
# ans2 = max([i for i in a if i <= delta]) #max элемент, не превышающий свободное место
# print(ans2)

# В магазине электроники раз в месяц проводится распродажа. Из всех товаров выбирают K товаров с самой большой ценой и
# делают на них скидку в 20%. По заданной информации о цене каждого из товаров и количестве товаров, на которые будет скидка,
# определите цену самого дорогого товара, не участвующего в распродаже, а также целую часть от суммы всех скидок.
# Входные и выходные данные. В первой строке входного файла 2.txt находятся два числа, записанные через пробел: N – общее
# количество цен (натуральное число, не превышающее 10 000) и K – количество товаров со скидкой. В следующих N строках
# находятся значения цены каждого из товаров (все числа натуральные, не превышающие 10 000), каждое в отдельной строке.
# Запишите в ответе два числа: сначала цену самого дорогого товара, не участвующего в распродаже, а затем целую часть от суммы
# всех скидок.
# Пример входного файла:
# 10 3
# 1800
# 3600
# 3700
# 800
# 2600
# 2500
# 1800
# 1500
# 1900
# 1200
# При таких исходных данных ответ должен содержать два числа – 2500 и 1980. Пояснение: скидка будет на товары стоимостью
# 3700, 3600, 2600. Тогда самый дорогой товар без скидки стоит 2500, а сумма скидок 740+720+520 = 1980.

# import sys
# sys.stdin = open('kurs-26-2.txt') #26-2.txt
#
# n, k = map(int, input().split())
# a = []
# for i in range(n):
#     a.append(int(input()))
# a.sort(reverse=True) #от большого к маленькому
# print(a[k]) #Самый дорогой товар без скидки
# print(sum(a[:k]) * 0.2)

# На складе лежат пакеты с углём различного веса и стоимости. Вес и стоимость записаны на каждом пакете как натуральные
# числа: вес не превосходит 100, стоимость не превосходит 10000. Для транспортировки отбираются K пакетов с самой низкой
# ценой угля за единицу веса; при равной стоимости за единицу веса выбираются пакеты с большим весом. По заданной
# информации о пакетах с углём и количестве транспортируемых пакетов определите суммарный вес угля в отправленных
# пакетах и стоимость самого тяжёлого отправленного пакета.
# Входные данные представлены в файле 2-4.txt следующим образом. В первой строке через пробел записаны числа N -
# количество пакетов на складе (натуральное число, не превышающее 1000) и K – количество пакетов на отправку (натуральное
# число, не превосходящее 100). В каждой из последующих N строк через пробел записаны два числа – вес и стоимость каждого
# пакета.
# Запишите в ответе два числа – сначала суммарный вес угля в отправленных пакетах, затем стоимость самого тяжёлого
# отправленного пакета.
# Пример организации исходных данных во входном файле:
# 10 4
# 47 470
# 50 600
# 60 480
# 45 540
# 30 300
# 15 180
# 70 560
# 30 360
# 91 910
# 40 320
# При таких исходных данных самая низкая стоимость угля в пакетах весом 60, 70, 40; затем – у пакетов весом 91, 30, 47. Поэтому
# наибольший возможный вес к отправке равен 70+60+40+91 = 261, а стоимость самого тяжёлого отправленного пакета равна
# 910.

# import sys
# sys.stdin = open('kurs26-2-4.txt') #26-7.txt
#
# n, k = map(int, input().split())
# a = []
# for i in range(n):
#     weight, price = map(int, input().split())
#     #a.append([price / weight, -weight, price])
#     a.append([weight, price])
# a.sort(key=lambda x: [x[1] / x[0], -x[0]])
# b = a[:k]
# ans1 = 0
# for i in b:
#     ans1 += i[0]
# print(ans1)
# b.sort(reverse=True)
# print(b[0][1])

#lalal
