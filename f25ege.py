# программу, которая ищет среди целых чисел, принадлежащих числовому отрезку
#[174352; 174397], числа, имеющие ровно 4 различных делителя, не включая единицу и само себя.
#Выведите эти четыре делителя для каждого найденного числа в порядке возрастания через
#пробел.
# def divisirs(n):
#     ans = set()
#     for i in range(1, n + 1):
#         if n % i == 0:
#             ans.add(i)
#     return ans

# for d in range(174352, 174397 + 1):
#     divs = divisirs(d)
#     if len(divs) == 6:
#         print(*sorted(divs)[1:-1])

#Обозначим через M целую часть среднего арифметического всех натуральных делителей
#целого числа, кроме единицы и самого числа. Если таких делителей у числа нет, то считаем
#значение M равным нулю. Напишите программу, которая перебирает целые числа,
#большие 550000, в порядке возрастания и ищет среди них такие, для которых значение M
#при делении на 31 даёт в остатке 13. Выведите первые 5 найденных чисел в порядке
#возрастания и справа от каждого числа – соответствующее значение M
# def divisirs(n):    #все делители,кроме 1 и n
#     ans = set()
#     for i in range(2,n):  #не вулючаем 1 и n
#         if n % i == 0:
#             ans.add(i)
#     return ans
# def m(n):
#     divs = divisirs(n)
#     if divs: # len(divs) > 0
#         return sum(divs) // len(divs)
#     return 0
#
# d = 550000
# cnt = 0
#
# while cnt < 5:
#     if m(d) % 31 == 13:
#         print(d,m(d))
#         cnt += 1
#     d += 1

#Напишите программу, которая ищет среди целых чисел, принадлежащих числовому
#отрезку [3175777; 3175811], простые числа. Выведите все найденные простые числа в
#порядке возрастания. В ответе запишите числа в порядке возрастания через пробел.
# def isPrime(n):
#     for i in range(2,n):
#         if n % i == 0:
#             return False
#         if i ** 2 > n: #на крайний случай, если числа слишком большие
#             break
#     return True

# def isPrime(n): #с оптимизацией, быстрее работает
#     ans = set()
#     for i in range(2,n):
#         if n % i == 0:
#             ans.add(i)
#             ans.add(n//i)
#         if i ** 2 > n: #на крайний случай, если числа слишком большие
#             break
#     return ans
#
# for d in range(3175777, 3175811 + 1):
#     if isPrime(d):
#         print(d, end=' ')

#Напишите программу, которая ищет среди целых чисел,
# принадлежащих числовому отрезку [600;141250],
# числа, имеющие ровно три различных натуральных делителя, не считая единицы и самого числа.
# Для каждого найденного числа запишите эти три делителя в каждой строке через запятую,
# без пробелов в порядке возрастания произведения этих трех делителей,
# добавляйте поля если это необходимо. Делители в строке таблицы также должны
# следовать в порядке возрастания.
# def divisirs(n):
#     ans = set()
#     for i in range(2,n):
#         if n % i == 0:
#             ans.add(i)
#             ans.add(n//i)
#         if i ** 2 > n:
#             break
#     return sorted(ans)
# for i in range(600,141250 + 1):
#     divis = divisirs(i)
#     if len(divis) == 3:
#         print(*divis,sep=',')

#Назовём маской числа последовательность цифр, в которой также могут встречаться следующие
#символы:
#– символ «?» означает ровно одну произвольную цифру;
#– символ «*» означает любую последовательность цифр произвольной длины; в том числе «*» может
#задавать и пустую последовательность.
#Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
#Среди натуральных чисел, не превышающих 10**10, найдите все числа, соответствующие маске
#1?5719*6, делящиеся на 2023 без остатка. В ответе запишите найденное число, а затем через пробел
#результат деления этого числа на 2023. Числа указывайте в порядке возрастания.

# mask 1?5719*6

# def isValid(n):
#     '''Проверяет, соответствует ли число маске'''
#     s = str(n)
#     return s[0] == '1' and s[2:6] == '5719' and s[-1] == '6'
#
# for d in range(0, 10**10 + 1, 2023):
#     if  isValid(d):
#         print(d, d // 2023)

# mask 1?5719*6 - маска файла
#читерство
# from  fnmatch import fnmatch
#
# for d in range(0, 10**10 + 1, 2023):
#     if  fnmatch(str(d),'1?5719*6'):
#         print(d, d // 2023)

#Найдите все натуральные числа, принадлежащие
# отрезку [1 500 000; 3 000 000],
# у которых ровно семь различных нечётных делителей
# (количество чётных делителей может быть любым).
#В ответе перечислите найденные числа в порядке возрастания.
# def oddDivisirs(n):
#     '''Кол-во нечетных делителей'''
#     ans = 0
#     for i in range(1,n+1):
#         if n % i == 0:
#             if i % 2 != 0:
#                 ans += 1
#             j = n // i
#             if j != i  and j % 2 != 0:
#                 ans += 1
#         if i ** 2 > n:
#             break
#     return ans
# for i in range(1500000, 3000000+1):
#     if oddDivisirs(i) == 7:
#         print(i)

